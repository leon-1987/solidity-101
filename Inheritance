pragma solidity 0.7.5;

import "/Ownable.sol";

contract Bank is Ownable{
    
   mapping(address => uint) balance;
   
   
   event depositDone(uint amount, address depositedTo);
   event balanceTransfer(uint amount, address transferTo);
   
   
   function deposit() public payable returns (uint){
       
       balance[msg.sender] += msg.value;
       emit depositDone(msg.value, msg.sender);
       return balance[msg.sender];
   }
   
   function withdraw(uint amount) public onlyOwner returns (uint){
       //msg.sender is an address
       //address toSend = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2;
       //toSend.transfer(amount);
       require(balance[msg.sender] >= amount);
       balance[msg.sender] -= amount;
       msg.sender.transfer(amount);
       return balance[msg.sender];
       
   }
   
   function getBalance() public view returns (uint){
       return balance[msg.sender];
   }
   
   function transfer(address recipient, uint amount) public {
       require(balance[msg.sender] >= amount, "Balance not sufficient");
       require(msg.sender != recipient, "Dont transfer money to yourself");
       
       uint previousSenderBalance = balance[msg.sender];
       
       _transfer(msg.sender, recipient, amount);
       
       assert(balance[msg.sender] == previousSenderBalance - amount);
       emit balanceTransfer(amount, recipient);
   }
   
   function _transfer(address from, address to, uint amount) private {
       balance[from] -= amount;
       balance[to] += amount;
   }
}
